-- Пример 1: std::cout
INSERT INTO CPP_code_explanations (example_id, structure, algorithm, notes) VALUES
(1,
 '1. std::cout - стандартный поток вывода в консоль
2. "Привет, мир!" - строковый литерал',
 '- Программа выводит текст в консоль
- std::endl добавляет перевод строки и сбрасывает буфер',
 'Оператор << используется для вывода данных в поток.');

-- Пример 2: Функция Add
INSERT INTO CPP_code_explanations (example_id, structure, algorithm, notes) VALUES
(2,
 '1. int - возвращаемый тип функции
2. Add - имя функции
3. Параметры с значениями по умолчанию: int a = 5, int b = 6
4. return - возвращает сумму параметров',
 '- При вызове без аргументов используются значения по умолчанию
- Можно передать свои значения: Add(3, 4) вернет 7',
 'Пример вызова: int result = Add(); // Вернет 11');

-- Пример 3: PrintNumbers
INSERT INTO CPP_code_explanations (example_id, structure, algorithm, notes) VALUES
(3,
 '1. int i = 1 - инициализация счетчика цикла
2. i <= n - условие продолжения цикла
3. i++ - инкремент счетчика',
 '1. Создается счетчик i = 1
2. Проверяется условие i <= n (n по умолчанию 5)
3. Если условие истинно:
   - Выводится значение i
   - Счетчик увеличивается на 1 (i++)
4. Повторяется шаг 2',
 'Цикл выполняется ровно n раз. Выводит числа в возрастающем порядке.
Результат для n=5: 1 2 3 4 5');

-- Пример 4: Манипуляция строками
INSERT INTO CPP_code_explanations (example_id, structure, algorithm, notes) VALUES
(4,
 '1. std::string original - исходная строка
2. std::transform с ::toupper - преобразование в верхний регистр
3. std::transform с ::tolower - преобразование в нижний регистр
4. std::cout - вывод текста',
 '1. Создается строка original с текстом
2. std::transform преобразует символы в верхний и нижний регистр
3. Вывод результата в консоль',
 'Исходная строка original не изменяется. Методы возвращают новые строки.
Результат:
Верхний регистр: ПРОГРАММИРОВАНИЕ НА C++
Нижний регистр: программирование на c++');

-- Пример 5: Конкатенация и потоковый вывод
INSERT INTO CPP_code_explanations (example_id, structure, algorithm, notes) VALUES
(5,
 '1. Конкатенация строк с помощью оператора +
2. std::to_string для преобразования int в string
3. std::cout с оператором << для вывода',
 'Способ 1 (конкатенация):
- Соединение строк через +
- Требуется преобразование чисел в строки

Способ 2 (потоковый вывод):
- Чистый и удобный вывод с помощью <<',
 'Вывод (одинаковый для обоих способов):
Имя: Алексей, Возраст: 30');

-- Пример 6: Площадь прямоугольника
INSERT INTO CPP_code_explanations (example_id, structure, algorithm, notes) VALUES
(6,
 '1. double length и width - длина и ширина
2. Вычисление площади: length * width
3. std::cout - вывод результата',
 'Формула:
Площадь = Длина × Ширина

Используется тип double для дробных чисел.',
 'Пример расчета:
5.5 * 3.2 = 17.6
Вывод:
Площадь прямоугольника: 17.6');

-- Пример 7: Проверка четности числа
INSERT INTO CPP_code_explanations (example_id, structure, algorithm, notes) VALUES
(7,
 '1. int number - проверяемое число
2. number % 2 == 0 - проверка четности
3. if-else для выбора ветки',
 'Если остаток от деления на 2 равен 0 — число четное, иначе — нечетное.',
 'Оператор % возвращает остаток от деления.');

-- Пример 8: Вывод чисел, кратных 3
INSERT INTO CPP_code_explanations (example_id, structure, algorithm, notes) VALUES
(8,
 '1. int N - верхняя граница диапазона
2. Цикл for от 1 до N
3. Проверка i % 3 == 0',
 'Перебираем числа от 1 до N и выводим те, что делятся на 3 без остатка.',
 'Результат для N=10:
3
6
9');

-- Пример 9: Функция Max
INSERT INTO CPP_code_explanations (example_id, structure, algorithm, notes) VALUES
(9,
 '1. int Max(int a, int b) - функция с двумя параметрами
2. Тернарный оператор для выбора максимума
3. std::cout - вывод результата',
 'Если a > b, возвращается a, иначе — b.',
 'Пример:
Max(5, 8) → 8');

-- Пример 10: Сумма элементов массива
INSERT INTO CPP_code_explanations (example_id, structure, algorithm, notes) VALUES
(10,
 '1. Массив целых чисел int[]
2. Цикл for с range-based for для перебора элементов
3. Накопление суммы в переменной sum',
 'Перебираем все элементы массива и суммируем их.',
 'Особенности:
- range-based for упрощает перебор
- sum += num эквивалентно sum = sum + num');

-- Пример 11: Вывод двумерного массива
INSERT INTO CPP_code_explanations (example_id, structure, algorithm, notes) VALUES
(11,
 '1. Объявление двумерного массива int matrix[3][3]
2. Вложенные циклы for по строкам и столбцам
3. std::cout для форматированного вывода',
 'Внешний цикл по строкам, внутренний — по столбцам.
Вывод элементов с пробелами и переводом строки после каждой строки.',
 'Структура матрицы 3x3:
1 2 3
4 5 6
7 8 9');

-- Пример 12: Максимальный элемент в трехмерном массиве
INSERT INTO CPP_code_explanations (example_id, structure, algorithm, notes) VALUES
(12,
 '1. Объявление трехмерного массива int cube[2][2][2]
2. Три вложенных цикла for по измерениям
3. Сравнение элементов для поиска максимума',
 'Начинаем с первого элемента как max.
Обход всех элементов и обновление max, если найден больший.',
 'Обход всего массива "куб" для поиска максимума.');
