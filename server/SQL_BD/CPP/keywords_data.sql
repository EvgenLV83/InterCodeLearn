-- Основные типы данных
INSERT INTO CPP_keywords (keyword, description, example, category) VALUES
('bool', 'Логический тип данных (true/false)', 'bool isActive = true;', 'Типы данных'),
('char', 'Тип для одного символа', "char c = 'A';", 'Типы данных'),
('int', 'Целочисленный тип', 'int number = 42;', 'Типы данных'),
('float', 'Число с плавающей точкой одинарной точности', 'float pi = 3.14f;', 'Типы данных'),
('double', 'Число с плавающей точкой двойной точности', 'double pi = 3.14159;', 'Типы данных'),
('void', 'Тип, означающий отсутствие значения', 'void MyFunction() {}', 'Типы данных'),

-- Модификаторы доступа и спецификаторы
('public', 'Доступно всем', 'class MyClass { public: int x; };', 'Модификаторы'),
('private', 'Доступно только внутри класса', 'class MyClass { private: int x; };', 'Модификаторы'),
('protected', 'Доступно внутри класса и наследников', 'class MyClass { protected: int x; };', 'Модификаторы'),
('static', 'Статический член класса или функция', 'static int count;', 'Модификаторы'),
('const', 'Константное значение', 'const double PI = 3.14;', 'Модификаторы'),

-- Управляющие конструкции
('if', 'Условный оператор', 'if (x > 0) { /* ... */ }', 'Управление потоком'),
('else', 'Альтернативная ветка if', 'else { /* ... */ }', 'Управление потоком'),
('switch', 'Множественный выбор', 'switch (value) { case 1: break; }', 'Управление потоком'),
('case', 'Вариант выбора в switch', 'case 1: /* ... */ break;', 'Управление потоком'),
('default', 'Ветка по умолчанию в switch', 'default: /* ... */ break;', 'Управление потоком'),
('for', 'Цикл с предусловием', 'for (int i = 0; i < 10; i++) { }', 'Управление потоком'),
('while', 'Цикл с предусловием', 'while (condition) { }', 'Управление потоком'),
('do', 'Цикл с постусловием', 'do { } while (condition);', 'Управление потоком'),
('break', 'Прерывание цикла или switch', 'break;', 'Управление потоком'),
('continue', 'Переход к следующей итерации цикла', 'continue;', 'Управление потоком'),
('return', 'Выход из функции с возвращаемым значением', 'return 0;', 'Управление потоком'),

-- Ключевые слова для функций и классов
('class', 'Определение класса', 'class MyClass { };', 'ООП'),
('struct', 'Определение структуры', 'struct Point { int x, y; };', 'ООП'),
('namespace', 'Область видимости', 'namespace MyNamespace { }', 'Организация кода'),
('template', 'Объявление шаблона', 'template<typename T> class MyClass { };', 'Шаблоны'),
('typename', 'Обозначение типа в шаблонах', 'template<typename T> void func(T param);', 'Шаблоны'),

-- Операторы
('new', 'Выделение памяти', 'int* p = new int;', 'Операторы'),
('delete', 'Освобождение памяти', 'delete p;', 'Операторы'),
('sizeof', 'Размер типа или объекта в байтах', 'size_t size = sizeof(int);', 'Операторы'),
('throw', 'Генерация исключения', 'throw std::runtime_error("error");', 'Обработка исключений'),
('try', 'Блок для обработки исключений', 'try { /* ... */ } catch (...) { }', 'Обработка исключений'),
('catch', 'Обработка исключения', 'catch (const std::exception& e) { }', 'Обработка исключений'),

-- Специальные ключевые слова
('auto', 'Автоматическое определение типа', 'auto x = 10;', 'Типы данных'),
('constexpr', 'Константное выражение времени компиляции', 'constexpr int x = 5;', 'Модификаторы'),
('nullptr', 'Нулевой указатель', 'int* ptr = nullptr;', 'Типы данных'),
('using', 'Директива пространства имен или псевдоним', 'using namespace std;', 'Пространства имен'),
('friend', 'Доступ к приватным членам класса', 'friend class MyFriend;', 'ООП');
