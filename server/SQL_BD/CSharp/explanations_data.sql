-- Пример 1: Console.WriteLine
INSERT INTO CSharp_code_explanations (example_id, structure, algorithm, notes) 
VALUES (
  1,
  '1. Console.WriteLine - метод вывода текста в консоль
2. "Привет, мир!" - строковый литерал (текст в кавычках)',
  '- Программа выводит текст между кавычками
- Автоматически добавляет переход на новую строку',
  'Точка с запятой ; завершает инструкцию'
);

-- Пример 2: Метод Add
INSERT INTO CSharp_code_explanations (example_id, structure, algorithm, notes)
VALUES (
  2,
  '1. public - доступен из других классов
2. int - возвращает целое число
3. Add - имя метода
4. Параметры:
   - int a = 5 - число со значением по умолчанию 5
   - int b = 6 - число со значением по умолчанию 6
5. return a + b - возвращает сумму параметров',
  '- При вызове без аргументов использует значения по умолчанию
- Можно передать свои значения: Add(3, 4) вернет 7',
  'Пример вызова: int result = Add(); // Вернет 11'
);

-- Пример 3: PrintNumbers
INSERT INTO CSharp_code_explanations (example_id, structure, algorithm, notes)
VALUES (
  3,
  '1. int i = 1 - инициализация счетчика
2. i <= n - условие продолжения цикла
3. i++ - инкремент счетчика',
  '1. Создается счетчик i = 1
2. Проверяется условие i <= n (n по умолчанию 5)
3. Если условие истинно:
   - Выводится значение i
   - Счетчик увеличивается на 1 (i++)
4. Повторяется шаг 2',
  'Цикл выполняется ровно n раз. Выводит числа в возрастающем порядке.
Результат для n=5: 1 2 3 4 5'
);

-- Пример 4: Манипуляция строками
INSERT INTO CSharp_code_explanations (example_id, structure, algorithm, notes)
VALUES (
  4,
  '1. string original - исходная строка
2. ToUpper() - преобразование в верхний регистр
3. ToLower() - преобразование в нижний регистр
4. Console.WriteLine - вывод с интерполяцией строк',
  '1. Создается строка original с текстом
2. ToUpper() преобразует все символы в ВЕРХНИЙ РЕГИСТР
3. ToLower() преобразует все символы в нижний регистр
4. Вывод с интерполяцией строк ($ перед кавычками)',
  'Исходная строка original не изменяется. Методы возвращают новые строки.
Результат:
Верхний регистр: ПРОГРАММИРОВАНИЕ НА C#
Нижний регистр: программирование на c#'
);

-- Пример 5: Конкатенация vs Интерполяция
INSERT INTO CSharp_code_explanations (example_id, structure, algorithm, notes)
VALUES (
  5,
  '1. Конкатенация: "Имя: " + name + ", Возраст: " + age
2. Интерполяция: $"Имя: {name}, Возраст: {age}"',
  'Способ 1 (конкатенация):
- Соединение строк оператором +
- Менее читаемо при многих параметрах

Способ 2 (интерполяция):
- Переменные подставляются в { }
- Более чистый и читаемый код',
  'Вывод (одинаковый для обоих способов):
Имя: Алексей, Возраст: 30'
);

-- Продолжаем для остальных примеров (6-12) аналогичным образом...

-- Пример 6: Площадь прямоугольника
INSERT INTO CSharp_code_explanations (example_id, structure, algorithm, notes)
VALUES (
  6,
  '1. double length - длина
2. double width - ширина
3. double area = length * width - вычисление площади
4. Console.WriteLine - вывод результата',
  'Формула:
Площадь = Длина × Ширина

Ключевые моменты:
- Используется тип double для дробных чисел
- Умножение оператором *',
  'Пример расчета:
5.5 * 3.2 = 17.6
Вывод:
Площадь прямоугольника: 17.6'
);

-- Пример 7: Четность числа
INSERT INTO CSharp_code_explanations (example_id, structure, algorithm, notes)
VALUES (
  7,
  '1. int number - проверяемое число
2. number % 2 == 0 - проверка четности
3. if-else - выбор ветки выполнения',
  'Логика проверки:
- Четное: number % 2 == 0 (остаток от деления на 2 равен 0)
- Нечетное: иначе',
  'Оператор % возвращает остаток от деления.

');


INSERT INTO CSharp_code_explanations (example_id, structure, algorithm, notes)
VALUES (
  8,
  '1. int N - верхняя граница диапазона
2. for (int i = 1; i <= N; i++) - цикл перебора чисел
3. if (i % 3 == 0) - проверка кратности 3',
  '1. Перебираем числа от 1 до N (включительно)
2. Проверяем условие i % 3 == 0
3. Если истина - выводим число',
  'Особенности:
- Проверка кратности через остаток от деления
- Вывод только подходящих чисел
Результат для N=10:
3
6
9'
);

INSERT INTO CSharp_code_explanations (example_id, structure, algorithm, notes)
VALUES (
  9,
  '1. int Max(int a, int b) - объявление метода
2. return a > b ? a : b - тернарный оператор
3. Console.WriteLine - вывод результата',
  '1. Сравнивает a и b
2. Если a > b - возвращает a
3. Иначе - возвращает b',
  'Тернарный оператор: условие ? значение_если_истина : значение_если_ложь
Пример:
Max(5, 8) → 8
Вывод:

');

INSERT INTO CSharp_code_explanations (example_id, structure, algorithm, notes)
VALUES (
  10,
  '1. int[] numbers - объявление массива
2. foreach (int num in numbers) - цикл перебора
3. sum += num - накопление суммы',
  '1. Создается массив из 5 чисел
2. Инициализируется переменная sum = 0
3. Цикл foreach перебирает все элементы
4. Каждое число добавляется к sum',
  'Особенности:
- foreach автоматически перебирает элементы
- sum += num эквивалентно sum = sum + num

');

INSERT INTO CSharp_code_explanations (example_id, structure, algorithm, notes)
VALUES (
  11,
  '1. int[,] matrix - объявление матрицы
2. Вложенные циклы for по строкам и столбцам
3. Console.Write + Console.WriteLine - форматированный вывод',
  '1. Внешний цикл по строкам (i)
2. Внутренний цикл по столбцам (j)
3. Вывод элемента matrix[i,j]
4. Перевод строки после каждой строки матрицы',
  'Структура матрицы 3x3:
1 2 3
4 5 6
7 8 9
Формат вывода:

');

INSERT INTO CSharp_code_explanations (example_id, structure, algorithm, notes)
VALUES (
  12,
  '1. int[,,] cube - трехмерный массив 2x2x2
2. Три вложенных цикла for по измерениям
3. if (cube[i,j,k] > max) - поиск максимума',
  '1. Изначально max = первый элемент
2. Цикл по первому измерению (i)
3. Цикл по второму измерению (j)
4. Цикл по третьему измерению (k)
5. Сравнение и обновление максимума',
  'Логика:
- Сравнивает каждый элемент
- Обходит весь "куб" данных

');