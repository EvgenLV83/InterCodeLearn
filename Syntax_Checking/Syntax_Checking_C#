const examplesP = [
    {
        codeP: `public void ${N[0]}() {
    Console.WriteLine("Привет, мир!");
}`,
        next: 1
    },
{
        codeP: `public int ${N[0]}(int ${N[1]}, int ${N[2]}) {
    return ${N[1]} + ${N[2]};
}`,
        next: 2
    },
{
        codeP: `public void ${N[0]}(int ${N[1]}) {
    for (int ${N[2]} = 1; ${N[2]} <= ${N[1]}; ${N[2]}++) {
        Console.WriteLine(${N[2]});
    }
}`,
        description: "Метод, который выводит числа от 1 до n.",
        next: 3
    },
    {
        codeP: `public bool ${N[0]}(int ${N[1]}) {
    return ${N[1]} % 2 == 0;
}`,
        description: "Метод, который проверяет, является ли число четным.",
        next: 4
    },
{
        codeP: `public void ${N[0]}(int[] ${N[1]}) {
    int ${N[2]} = ${N[1]}.Length;
    for (int ${N[3]} = 0; ${N[3]} < ${N[2]} - 1; ${N[3]}++) {
        for (int ${N[4]} = 0; ${N[4]} < ${N[2]} - ${N[3]} - 1; ${N[4]}++) {
            if (${N[1]}[${N[4]}] > ${N[1]}[${N[4]} + 1]) {
                int ${N[5]} = ${N[1]}[${N[4]}];
                ${N[1]}[${N[4]}] = ${N[1]}[${N[4]} + 1];
                ${N[1]}[${N[4]} + 1] = ${N[5]};
            }
        }
    }
}`,
        description: "Метод, который реализует алгоритм сортировки пузырьком.",
        next: 5
    },
    {
        codeP: `public int ${N[0]}(int ${N[1]}) {
    if (${N[1]} <= 1) return 1;
    return ${N[1]} * ${N[0]}(${N[1]} - 1);
}`,
        description: "Метод, который вычисляет факториал числа с использованием рекурсии.",
        next: 6
    },
{
        codeP: `public void ${N[0]}() {
    int[] ${N[1]} = { 1, 2, 3, 4, 5 };
    foreach (int ${N[2]} in ${N[1]}) {
        Console.WriteLine(${N[2]});
    }
}`,
        description: "Пример работы с массивом и циклом foreach для его перебора.",
        next: 7
    },
    {
        codeP: `public class ${N[0]} {
    public string ${N[1]} { get; set; }
    public int ${N[2]} { get; set; }
    
    public void ${N[3]}() {
        Console.WriteLine($"Меня зовут 
{${N[1]}}, мне {${N[2]}} лет.");
    }
}`,
        description: "Определение класса с свойствами и методом для представления.",
        next: 8
    },
{
        codeP: `public void ${N[0]}() {
    try {
        int ${N[1]} = 10 / 0; // Деление на ноль
    } catch (DivideByZeroException ${N[2]}) {
        Console.WriteLine("Ошибка: " + ${N[2]}.Message);
    } finally {
        Console.WriteLine("Этот блок выполнится в любом случае.");
    }
}`,
        description: "Пример обработки исключений с использованием try-catch-finally.",
        next: 9
    },
    {
        codeP: `public void ${N[0]}() {
    List<string> ${N[1]} = new List<string> { "Яблоко", "Банан", "Груша" };
    ${N[1]}.Add("Апельсин");
    foreach (var ${N[2]} in ${N[1]}) {
        Console.WriteLine(${N[2]});
    }
}`,
        description: "Пример работы с коллекцией List и добавления элементов в нее.",
        next: 10
    },
{
        codeP: `public void ${N[0]}() {
    int[] ${N[1]} = { 1, 2, 3, 4, 5 };
    var ${N[2]} = from ${N[3]} in ${N[1]}
                 where ${N[3]} % 2 == 0
                 select ${N[3]};
    foreach (var ${N[4]} in ${N[2]}) {
        Console.WriteLine(${N[4]});
    }
}`,
        description: "Пример использования LINQ для фильтрации четных чисел из массива.",
        next: 11
    },

    {
        codeP: `public void ${N[0]}() {
    Dictionary<string, int> ${N[1]} = new Dictionary<string, int>();
    ${N[1]}["Alice"] = 30;
    ${N[1]}["Bob"] = 25;
    
    foreach (var ${N[2]} in ${N[1]}) {
        Console.WriteLine($"{${N[2]}.Key} - {${N[2]}.Value} лет
");
    }
}`,
        description: "Пример работы со словарем (Dictionary) для хранения пар ключ-значение.",
        next: 12
    },

{
        codeP: `public void ${N[0]}() {
    Task.Run(async () => {
        await Task.Delay(1000);
        Console.WriteLine("Асинхронная операция завершена.");
    }).Wait();
}`,
        description: "Пример асинхронного программирования с использованием Task и async/await.",
        next: 13
      },
    {
        codeP: `public void ${N[0]}() {
    string ${N[1]} = "Программирование на C#";
    string ${N[2]} = ${N[1]}.ToUpper();
    string ${N[3]} = ${N[1]}.ToLower();
    Console.WriteLine("Верхний регистр: 
{${N[2]}");
    Console.WriteLine("Нижний регистр: 
{${N[3]}");
}`,
        description: "Пример манипуляции строками: преобразование в верхний и нижний регистр.",
        next: 14
    },
    {
        codeP: `public void ${N[0]}() {
    class ${N[1]} {
        public virtual void ${N[2]}() {
            Console.WriteLine("Животное издает звук");
        }
    }
    
    class ${N[3]} : ${N[1]} {
        public override void ${N[2]}() {
            Console.WriteLine("Гав!");
        }
    }
    
    ${N[3]} ${N[4]} = new ${N[3]}();
    ${N[4]}.${N[2]}(); 
}`,
        description: "Пример наследования и переопределения метода в C#.",
        next: 15
    },
    {
        codeP: `public void ${N[0]}() {
    interface ${N[1]} {
        void ${N[2]}();
    }
    
    class ${N[3]} : ${N[1]} {
        public void ${N[2]}() {
            Console.WriteLine("Мяу!");
        }
    }
    
    ${N[1]} ${N[4]} = new ${N[3]}();
    ${N[4]}.${N[2]}();
}`,
        description: "Пример использования интерфейсов в C#.",
        next: 16
    },
    {
        codeP: `public void ${N[0]}() {
    int? ${N[1]} = null;
    if (${N[1]}.HasValue) {
        Console.WriteLine($"Значение: 
{${N[1]}.Value}");
    } else {
        Console.WriteLine("Значение равно null");
    }
}`,
        description: "Пример использования нулевых типов (nullable types) в C#.",
        next: 17
    },
    {
        codeP: `public void ${N[0]}() {
    enum ${N[1]} { Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday }
    ${N[1]} ${N[2]} = ${N[1]}.Monday;
    Console.WriteLine($"Сегодня: {${N[2]}});
}`,
        description: "Пример использования перечислений (enum) в C#.",
        next: 18
    },
    {
        codeP: `public void ${N[0]}() {
    class ${N[1]} : Exception {
        public ${N[1]}(string message) : base(message) {}
    }

    try {
        throw new ${N[1]}("Это пользовательское исключение.");
    } catch (${N[1]} ${N[2]}) {
        Console.WriteLine("Поймано исключение: " + ${N[2]}.Message);
    }
}`,
        description: "Пример обработки пользовательского исключения в C#.",
        next: 19
    },
    {
        codeP: `public void ${N[0]}() {
    class ${N[1]} {
        public static int ${N[2]}(int ${N[3]}) {
            return ${N[3]} * ${N[3]};
        }
    }
    
    Console.WriteLine(${N[1]}.${N[2]}(5));
}`,
        description: "Пример использования статических членов класса для выполнения операции.",
        next: 20
    },
    {
        codeP: `public void ${N[0]}() {
    var ${N[1]} = (Name: "Иван", Age: 30);
    Console.WriteLine($"Имя: 
{${N[1]}.Name}, Возраст: {${N[1]}.Age}");
}`,
        description: "Пример использования кортежей для хранения нескольких значений.",
        next: 21
    },
    {
        codeP: `public void ${N[0]}() {
    string ${N[1]} = "Алексей";
    int ${N[2]} = 25;
    string ${N[3]} = $"Меня зовут 
{${N[1]}}, мне {${N[2]}} лет.";
    Console.WriteLine(${N[3]});
}`,
        next: 22
    },
    {
        codeP: `public void ${N[0]}() {
    public static class ${N[1]} {
        public static string ${N[2]}(this string ${N[3]}) {
            return System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(${N[3]}.ToLower());
        }
    }
    
    string ${N[4]} = "программирование на c#".${N[2]}();
    Console.WriteLine(${N[4]}); // Вывод: Программирование На C#
}`,
        next: 23
    },
{
        codeP: `public void ${N[0]}() {
    public class ${N[1]} {
        public event Action ${N[2]};

        public void ${N[3]}() {
            ${N[2]}?.Invoke();
        }
    }

    ${N[1]} ${N[4]} = new ${N[1]}();
    ${N[4]}.${N[2]} += () => Console.WriteLine("Кнопка нажата!");
    ${N[4]}.${N[3]}(); // Вывод: Кнопка нажата!
}`,
        next: null
    }
];