import { domElements } from './dom-elements.js';
import { parseUserInput } from './code-parser.js';

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let appState = {
  examples: [],
  templates: [],
  currentExampleIndex: 0,
  codeVisible: false
};

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
export async function loadData() {
  const { loadingEl, tryButton, resultEl } = domElements;

  loadingEl.style.display = 'block';
  tryButton.disabled = true;

  try {
    const [examplesResponse, templatesResponse] = await Promise.all([
      fetch('/api/examples'),
      fetch('/api/templates')
    ]);

    if (!examplesResponse.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–º–µ—Ä–æ–≤');
    if (!templatesResponse.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤');

    appState.examples = await examplesResponse.json();
    appState.templates = await templatesResponse.json();

    tryButton.disabled = false;
    loadExample(0);
  } catch (error) {
    resultEl.innerText = `–û—à–∏–±–∫–∞: ${error.message}`;
    console.error(error);
  } finally {
    loadingEl.style.display = 'none';
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–º–µ—Ä–∞
export function loadExample(index) {
  const {
    codeEl, descriptionEl, userInputEl, resultEl,
    comparisonEl, codeExplanationEl, nextButton, tryButton, checkButton
  } = domElements;

  if (index !== null && index < appState.examples.length) {
    appState.currentExampleIndex = index;
    const example = appState.examples[index];

    codeEl.innerText = example.code;
    descriptionEl.innerText = example.description;
    userInputEl.value = '';
    resultEl.innerText = '';
    codeEl.style.display = 'none';
    comparisonEl.style.display = 'none';
    codeExplanationEl.style.display = 'none';
    appState.codeVisible = false;
    nextButton.disabled = true;
    tryButton.innerText = "–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–¥";
    checkButton.disabled = false;
  } else {
    resultEl.innerText = "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ –ø—Ä–∏–º–µ—Ä—ã!";
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
export function checkCode() {
  const { userInputEl, resultEl, comparisonEl, userCodeDisplayEl, correctCodeDisplayEl, nextButton } = domElements;
  const userInput = userInputEl.value.trim().replace(/\s+/g, ' ');
  const N = parseUserInput(userInput);

  let correctTemplate = appState.templates[appState.currentExampleIndex].codeP;
  let correctCode = correctTemplate;

  // –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏
  for (let i = 0; i < N.length; i++) {
    correctCode = correctCode.replace(new RegExp(`\\{${i}\\}`, 'g'), N[i]);
  }

  const normalizedUserInput = userInput.replace(/\s+/g, ' ').trim();
  const normalizedCorrectCode = correctCode.replace(/\s+/g, ' ').trim();

  console.log(normalizedUserInput);
  console.log(normalizedCorrectCode);

  if (normalizedUserInput === normalizedCorrectCode) {
    const result2 = calculateResult(N, appState.currentExampleIndex);
    resultEl.innerText = `‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç: ${result2}. –ù–∞–∂–º–∏—Ç–µ '–°–ª–µ–¥—É—é—â–∏–π'.`;
    nextButton.disabled = false;
    comparisonEl.style.display = 'none';
  } else {
    resultEl.innerText = "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –°–º–æ—Ç—Ä–∏—Ç–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∏–∂–µ.";
    comparisonEl.style.display = 'block';
    userCodeDisplayEl.innerText = userInput;

    // –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —à–∞–±–ª–æ–Ω —Å –∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏
    correctCodeDisplayEl.innerText = correctTemplate;
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function calculateResult(N, currentIndex) {
  const example = appState.examples[currentIndex];
  console.log(N);
  console.log(currentIndex);
  console.log(example);

  if (example.next === 1) return N[0];
  if (example.next === 2) return Number(N[2]) + Number(N[4]);
  if (example.next === 3) {
    let n = parseInt(N[1]);
    let result = [];
    for (let i = 1; i <= n; i++) {
      result.push(i);
    }
    return result.join(' ');
  }
  if (example.next === 4) {
    const original = N[2];
    const upper = original.toUpperCase();
    const lower = original.toLowerCase();
    return "\n" + upper + "\n" + lower;
  }
  return 0;
}

export function toggleCodeVisibility() {
  const { codeEl, tryButton, checkButton } = domElements;

  if (!appState.codeVisible) {
    codeEl.style.display = 'block';
    appState.codeVisible = true;
    tryButton.innerText = "–°–∫—Ä—ã—Ç—å –∫–æ–¥";
    checkButton.disabled = true;
  } else {
    loadExample(appState.currentExampleIndex);
  }
}

export function repeatExample() {
  const { resultEl } = domElements;
  loadExample(appState.currentExampleIndex);
  resultEl.innerText = "üîÑ –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!";
}

export function nextExample() {
  const currentExample = appState.examples[appState.currentExampleIndex];
  if (currentExample.next !== null) {
    loadExample(currentExample.next);
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
export async function createApp() {
  await loadData();
}