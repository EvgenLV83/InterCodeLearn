

import { domElements } from './dom-elements.js';
import { parseUserInput } from './code-parser.js';

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let appState = {
  examples: [],
  templates: [],
  currentExampleIndex: 0,
  codeVisible: false
};

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
export async function loadData() {
  const { loadingEl, tryButton, resultEl } = domElements;

  loadingEl.style.display = 'block';
  tryButton.disabled = true;

  try {
    const [examplesResponse, templatesResponse] = await Promise.all([
      fetch('/api/examples'),
      fetch('/api/templates')
    ]);

    if (!examplesResponse.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–º–µ—Ä–æ–≤');
    if (!templatesResponse.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤');

    appState.examples = await examplesResponse.json();
    appState.templates = await templatesResponse.json();

    tryButton.disabled = false;
    loadExample(0);
  } catch (error) {
    resultEl.innerText = `–û—à–∏–±–∫–∞: ${error.message}`;
    console.error(error);
  } finally {
    loadingEl.style.display = 'none';
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–º–µ—Ä–∞
export function loadExample(index) {
  const {
    codeEl, descriptionEl, userInputEl, resultEl,
    comparisonEl, codeExplanationEl, nextButton, tryButton, checkButton
  } = domElements;

  if (index !== null && index < appState.examples.length) {
    appState.currentExampleIndex = index;
    const example = appState.examples[index];

    codeEl.innerText = example.code;
    descriptionEl.innerText = example.description;
    userInputEl.value = '';
    resultEl.innerText = '';
    codeEl.style.display = 'none';
    comparisonEl.style.display = 'none';
    codeExplanationEl.style.display = 'none';
    appState.codeVisible = false;
    nextButton.disabled = true;
    tryButton.innerText = "–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–¥";
    checkButton.disabled = false;
  } else {
    resultEl.innerText = "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ –ø—Ä–∏–º–µ—Ä—ã!";
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
export function checkCode() {
  const { userInputEl, resultEl, comparisonEl, userCodeDisplayEl, correctCodeDisplayEl, nextButton, codeExplanationEl} = domElements;
  const userInput = userInputEl.value.trim().replace(/\s+/g, ' ');
  const N = parseUserInput(userInput);

  let correctTemplate = appState.examples[appState.currentExampleIndex].code;
  let correctCode = appState.templates[appState.currentExampleIndex].codeP;

  // –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏
  for (let i = 0; i < N.length; i++) {
    correctCode = correctCode.replace(new RegExp(`\\{${i}\\}`, 'g'), N[i]);
  }

  const normalizedUserInput = userInput.replace(/\s+/g, ' ').trim();
  const normalizedCorrectCode = correctCode.replace(/\s+/g, ' ').trim();

  console.log(normalizedUserInput);
  console.log(normalizedCorrectCode);

  if (normalizedUserInput === normalizedCorrectCode) {
    const resultUser = calculateResult(N, appState.currentExampleIndex);
    resultEl.innerText = `‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! \n –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞—à–µ–≥–æ –∫–æ–¥–∞: \n ${resultUser} \n –ù–∞–∂–º–∏—Ç–µ '–°–ª–µ–¥—É—é—â–∏–π'.`;
    nextButton.disabled = false;
    comparisonEl.style.display = 'none';
    displayCodeExplanation(appState.currentExampleIndex);
  } else {
    resultEl.innerText = "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –°–º–æ—Ç—Ä–∏—Ç–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∏–∂–µ.";
    comparisonEl.style.display = 'block';
    userCodeDisplayEl.innerText = userInput;

    // –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —à–∞–±–ª–æ–Ω —Å –∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏
    correctCodeDisplayEl.innerText = correctTemplate;
    codeExplanationEl.style.display = 'none'; 
  }
}


function calculateResult(N, currentIndex) {
  const example = appState.examples[currentIndex];

  if (example.next === 1) return N[0];
  if (example.next === 2) return Number(N[0]) + Number(N[1]);
  if (example.next === 3) {
    let n = parseInt(N[0]);
    let result = [];
    for (let i = 1; i <= n; i++) {
      result.push(i);
    }
    return result.join(' ');
  }
  if (example.next === 4) {
    const original = N[2];
    const upper = original.toUpperCase();
    const lower = original.toLowerCase();
    return "\n" + upper + "\n" + lower;
  }
  if (example.next === 5) {
    return `${N[0]} ${N[4]}${N[3]} ${N[6]}\n${N[0]} ${N[4]}${N[3]} ${N[6]}`;
  }
  if (example.next === 6) {
    return Number(N[2]) * Number(N[3]);
  }
  if (example.next === 7) {
    const num = Number(N[4]);
    return num % 2 === 0 ? `${num} - —á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ.` : `${num} - –Ω–µ—á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ.`;
  }
  if (example.next === 8) {
    let n = parseInt(N[0]);
    let result = [];
    for (let i = 1; i <= n; i++) {
      if (i % 3 === 0) result.push(i);
    }
    return result.join(' ');
  }
  if (example.next === 9) {
    return Math.max(Number(N[2]), Number(N[3]));
  }
  if (example.next === 10) {
    return Number(N[2]) + Number(N[3]) + Number(N[4]) + Number(N[5]) + Number(N[6]);
  }
  if (example.next === 11) {
    return `${N[0]} ${N[1]} ${N[2]}\n${N[3]} ${N[4]} ${N[5]}\n${N[6]} ${N[7]} ${N[8]}`;
  }
  if (example.next === 12) {
   return Math.max(Number(N[2]), Number(N[3]), Number(N[4]), Number(N[5]), Number(N[6]), Number(N[7]), Number(N[8]), Number(N[9]));
  }
  return 0;
}





async function displayCodeExplanation(exampleIndex) {
  const { codeExplanationEl } = domElements;
  
  try {
    const response = await fetch(`/api/code-explanations/${exampleIndex + 1}`); // +1 –µ—Å–ª–∏ –∏–Ω–¥–µ–∫—Å—ã –≤ –ë–î –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 1
    if (!response.ok) throw new Error('–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    
    const explanation = await response.json();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—ä—è—Å–Ω–µ–Ω–∏–∏
    if (!explanation) throw new Error('–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ');
    
    codeExplanationEl.innerHTML = `
      <div class="explanation-section">
        <h3>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–¥–∞:</h3>
        <p>${explanation.structure || "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"}</p>
      </div>
      <div class="explanation-section">
        <h3>–ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç—ã:</h3>
        <p>${explanation.algorithm || "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"}</p>
      </div>
      <div class="explanation-section">
        <h3>–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:</h3>
        <p>${explanation.notes || "–ù–µ—Ç –ø—Ä–∏–º–µ—á–∞–Ω–∏–π"}</p>
      </div>
    `;
    codeExplanationEl.style.display = 'block';
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è:', error);
    codeExplanationEl.innerHTML = `
      <div class="explanation-error">
        <p>–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫ —ç—Ç–æ–º—É –ø—Ä–∏–º–µ—Ä—É –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ</p>
        <p>${error.message}</p>
      </div>
    `;
    codeExplanationEl.style.display = 'block';
  }
}






            
            // –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –∫–æ–¥–∞
           export function highlightCode() {
  const { languageSelector, userInputEl, codeHighlight } = domElements;
  
  if (!languageSelector || !userInputEl || !codeHighlight) {
    console.error('–≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    return;
  }

  const language = languageSelector.value;
  const code = userInputEl.value;
  
  codeHighlight.className = 'language-' + language;
  codeHighlight.textContent = code;
  
  if (typeof Prism !== 'undefined') {
    Prism.highlightElement(codeHighlight);
  }
  
  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã
  codeHighlight.style.height = userInputEl.scrollHeight + 'px';
}

/////////////////////////////////////////////////////////////////////////////////////////
export function toggleCodeVisibility() {
  const { codeEl, tryButton, checkButton, userInputEl } = domElements;
  const currentExample = appState.examples[appState.currentExampleIndex];

  if (!appState.codeVisible) {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥
    //codeEl.style.display = 'block';
    userInputEl.value = currentExample.code; // –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–¥ –≤ textarea
    highlightCode();
    appState.codeVisible = true;
    tryButton.innerText = "–°–∫—Ä—ã—Ç—å –∫–æ–¥";
    checkButton.disabled = true;
  } else {
    // –°–∫—Ä—ã–≤–∞–µ–º –∫–æ–¥ (–ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å)
    //codeEl.style.display = 'none';
    userInputEl.value = ''; // –û—á–∏—â–∞–µ–º textarea
    highlightCode();
    appState.codeVisible = false;
    tryButton.innerText = "–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–¥";
    checkButton.disabled = false;
  }
}


export function repeatExample() {
  
  const { resultEl } = domElements;
  loadExample(appState.currentExampleIndex);
  resultEl.innerText = "üîÑ –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!";
  highlightCode();
}

export function nextExample() {
  const currentExample = appState.examples[appState.currentExampleIndex];
  if (currentExample.next !== null) {
    loadExample(currentExample.next);
  }
  highlightCode();
}


// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π createApp()
export async function createApp() {
  await loadData();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  const { userInputEl, languageSelector } = domElements;
  
  if (userInputEl && languageSelector) {
    userInputEl.addEventListener('input', highlightCode);
    languageSelector.addEventListener('change', highlightCode);
    
    userInputEl.addEventListener('scroll', function() {
      domElements.codeHighlight.scrollTop = userInputEl.scrollTop;
      domElements.codeHighlight.scrollLeft = userInputEl.scrollLeft;
    });
    
    userInputEl.addEventListener('keydown', function(e) {
      if (e.key === 'Tab') {
        e.preventDefault();
        const start = this.selectionStart;
        const end = this.selectionEnd;
        
        this.value = this.value.substring(0, start) + '    ' + this.value.substring(end);
        this.selectionStart = this.selectionEnd = start + 4;
        highlightCode();
      }
    });
    
    // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞
    highlightCode();
    
  }
}
            

